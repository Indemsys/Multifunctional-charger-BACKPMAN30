#include "freemaster.h"
#include "freemaster_private.h"
#include "freemaster_protocol.h"
#include "freemaster_serial.h"
#include "freemaster_utils.h"


/* FreeMASTER communication buffer (in/out) plus the STS, LEN(LEB) and CRC bytes */
static FMSTR_BCHR fmstr_pCommBuffer[FMSTR_COMM_BUFFER_SIZE + 1 + 4 + 2];

typedef volatile union
{
    FMSTR_FLAGS all;

    struct
    {
        unsigned bTxActive : 1;        /* response is being transmitted */
        unsigned bTxWaitTC : 1;        /* response sent, wait for transmission complete */
        unsigned bTxLastCharSOB : 1;   /* last transmitted char was equal to SOB  */
        unsigned bRxLastCharSOB : 1;   /* last received character was SOB */
        unsigned bRxMsgLengthNext : 1; /* expect the length byte next time */
    } flg;

} FMSTR_SERIAL_FLAGS;

static FMSTR_SERIAL_FLAGS _fmstr_wFlags;

/* receive and transmit buffers and counters */
static FMSTR_SIZE8 fmstr_nTxTodo; /* transmission to-do counter (0 when tx is idle) */
static FMSTR_SIZE8 fmstr_nRxTodo; /* reception to-do counter (0 when rx is idle) */
static FMSTR_BPTR fmstr_pTxBuff;  /* pointer to next byte to transmit */
static FMSTR_BPTR fmstr_pRxBuff;  /* pointer to next free place in RX buffer */
static FMSTR_BCHR fmstr_nRxCrc8;  /* checksum of data being received for short messages */

/* Maximal length of message to use 8 bit CRC8. */
#define FMSTR_SHORT_MSG_LEN 128

static void _FMSTR_Listen(void);
static void _FMSTR_SendError(FMSTR_BCHR nErrCode);
static FMSTR_BOOL _FMSTR_Tx(FMSTR_BCHR *getTxChar);
static FMSTR_BOOL _FMSTR_Rx(FMSTR_BCHR rxChar);


#if FMSTR_SHORT_INTR > 0
static FMSTR_BCHR fmstr_rxBuff[FMSTR_COMM_RQUEUE_SIZE];
static FMSTR_RING_BUFFER fmstr_rxQueue;
#endif


#if FMSTR_SHORT_INTR > 0
static void _FMSTR_RxDequeue(void);
#endif

static FMSTR_BOOL  _FMSTR_SerialInit(void);
static void        _FMSTR_SerialPoll(void);
static void        _FMSTR_SerialSendResponse(FMSTR_BPTR pResponse, FMSTR_SIZE nLength, FMSTR_U8 statusCode, void *identification);

/* Interface of this serial driver */
const FMSTR_TRANSPORT_INTF FMSTR_SERIAL =
{
  FMSTR_C99_INIT(Init)         _FMSTR_SerialInit,
  FMSTR_C99_INIT(Poll)         _FMSTR_SerialPoll,
  FMSTR_C99_INIT(SendResponse) _FMSTR_SerialSendResponse,
};


/*******************************************************************************
 *
 * @brief    Routine to quick-receive a character (put to a queue only)
 *
 * This function puts received character into a queue and exits as soon as possible.
 *
 *******************************************************************************/
#if FMSTR_SHORT_INTR > 0
/*-----------------------------------------------------------------------------------------------------

 This function takes the queued characters and calls FMSTR_Rx() for each of them,
 just like as the characters would be received from SCI one by one.
-----------------------------------------------------------------------------------------------------*/
static void _FMSTR_RxDequeue(void)
{
  FMSTR_BCHR nChar = 0U;
  while (_FMSTR_RingBuffHasData(&fmstr_rxQueue) != FMSTR_FALSE)
  {
    nChar = _FMSTR_RingBuffGet(&fmstr_rxQueue);
    if (_fmstr_wFlags.flg.bTxActive == 0U)   // emulate the SCI receive event
    {
      (void)_FMSTR_Rx(nChar);
    }
  }
}
#endif /* FMSTR_SHORT_INTR */

/*-----------------------------------------------------------------------------------------------------

  This function checks the SCI flags and calls the Rx and/or Tx functions
  This function can be called either from SCI ISR or from the polling routine
-----------------------------------------------------------------------------------------------------*/
void FMSTR_ProcessSerial(void)
{
  FMSTR_BOOL endOfPacket = FMSTR_FALSE;

  if (_fmstr_wFlags.flg.bTxActive != 0U) // transmitter active and empty?
  {
    while (FMSTR_SERIAL_DRV.IsTransmitRegEmpty() != FMSTR_FALSE) // able to accept another character?
    {
      FMSTR_BCHR ch;
      endOfPacket = _FMSTR_Tx(&ch);   // just put the byte into the SCI transmit buffer
      if (endOfPacket == FMSTR_FALSE)
      {
        FMSTR_SERIAL_DRV.PutChar((FMSTR_U8)ch);
      }
      else break;
    }

    if (endOfPacket != FMSTR_FALSE)
    {
      FMSTR_SERIAL_DRV.Flush();
      _fmstr_wFlags.flg.bTxWaitTC = 1U;

#if FMSTR_SHORT_INTR || FMSTR_LONG_INTR
      if (FMSTR_SERIAL_DRV.IsTransmitterActive() != FMSTR_FALSE) // Enable UART Transfer Complete interrupt in case of interrupt mode of communication.
      {
        FMSTR_SERIAL_DRV.EnableTransmitCompleteInterrupt(FMSTR_TRUE); // Enable Trasmit complete interrupt
      }
#endif
    }
    /* when SCI TX buffering is enabled, we must first wait until all characters are physically transmitted (before disabling transmitter) */
    if (_fmstr_wFlags.flg.bTxWaitTC != 0U && FMSTR_SERIAL_DRV.IsTransmitterActive() == FMSTR_FALSE)
    {
      _FMSTR_Listen();  // after TC, we can switch to listen mode safely
    }
  }
  else
  {
    while (FMSTR_SERIAL_DRV.IsReceiveRegFull() != FMSTR_FALSE) // data byte received?
    {
      FMSTR_BCHR rxChar = 0U;
      rxChar            = FMSTR_SERIAL_DRV.GetChar();
#if FMSTR_SHORT_INTR > 0
      _FMSTR_RingBuffPut(&fmstr_rxQueue, rxChar); // TODO: if queue is lower than received data
#else
      (void)_FMSTR_Rx(rxChar);
#endif
    }
  }
}

/******************************************************************************
 *
 * @brief    Start listening on a serial line
 *
 * Reset the receiver machine and start listening on a serial line
 *
 ******************************************************************************/
static void _FMSTR_Listen(void)
{
  fmstr_nRxTodo = 0U;

  /* disable transmitter state machine */
  _fmstr_wFlags.flg.bTxActive = 0U;
  _fmstr_wFlags.flg.bTxWaitTC = 0U;

  /* disable transmitter, enable receiver (enables single-wire connection) */
  FMSTR_SERIAL_DRV.EnableTransmit(FMSTR_FALSE);
  FMSTR_SERIAL_DRV.EnableReceive(FMSTR_TRUE);

  /* disable transmit, enable receive interrupts */
#if FMSTR_SHORT_INTR || FMSTR_LONG_INTR
  FMSTR_SERIAL_DRV.EnableTransmitInterrupt(FMSTR_FALSE);         /* disable Serial transmit interrupt */
  FMSTR_SERIAL_DRV.EnableTransmitCompleteInterrupt(FMSTR_FALSE); /* disable Serial transmit complete interrupt */
  FMSTR_SERIAL_DRV.EnableReceiveInterrupt(FMSTR_TRUE);           /* enable Serial receive interrupt */
#endif                                                             /* FMSTR_SHORT_INTR || FMSTR_LONG_INTR */


}

/*-----------------------------------------------------------------------------------------------------


  \param nErrCode
-----------------------------------------------------------------------------------------------------*/
static void _FMSTR_SendError(FMSTR_BCHR nErrCode)
{

    /* fill & send single-byte response */
  _FMSTR_SerialSendResponse(&fmstr_pCommBuffer[2], 0U, nErrCode, NULL);
}

/******************************************************************************
 *
 * @brief    Finalize transmit buffer before transmitting
 *
 * @param    nLength - response length (1 for status + data length)
 *
 *
 * This Function takes the data already prepared in the transmit buffer
 * (inlcuding the status byte). It computes the check sum and kicks on tx.
 *
 ******************************************************************************/
static void _FMSTR_SerialSendResponse(FMSTR_BPTR pResponse, FMSTR_SIZE nLength, FMSTR_U8 statusCode, void *identification)
{
  FMSTR_SIZE8 i;
  FMSTR_U8 c;

  FMSTR_UNUSED(identification);

  if (nLength > 254U || pResponse != &fmstr_pCommBuffer[2])
  {
        /* The Serial driver doesn't support bigger responses than 254 bytes, change the response to status error */
    statusCode = FMSTR_STC_RSPBUFFOVF;
    nLength    = 0U;
  }

    /* remember the buffer to be sent */
  fmstr_pTxBuff = fmstr_pCommBuffer;
    /* Send the message with status, length and checksum. SOB is not counted as it is sent right here. */
  fmstr_nTxTodo = (FMSTR_SIZE8)(nLength + 3U);

  if ((statusCode & FMSTR_STSF_VARLEN) != 0U)
  {
    fmstr_pCommBuffer[0] = (FMSTR_BCHR)statusCode;
    fmstr_pCommBuffer[1] = (FMSTR_BCHR)nLength;
  }
  else
  {
    fmstr_pCommBuffer[1] = (FMSTR_BCHR)statusCode;
    fmstr_pTxBuff++;
    fmstr_nTxTodo--;
  }

    /* Initialize CRC algorithms */
  FMSTR_Crc8Init(&fmstr_nRxCrc8);

    /* status byte and data are already there, compute checksum only     */
  pResponse = fmstr_pTxBuff;
  for (i = 1U; i < fmstr_nTxTodo; i++)
  {
    pResponse = FMSTR_ValueFromBuffer8(&c, pResponse);
        /* add character to checksum */
    FMSTR_Crc8AddByte(&fmstr_nRxCrc8, c);
  }

    /* store checksum after the message */
  pResponse = FMSTR_ValueToBuffer8(pResponse, fmstr_nRxCrc8);

    /* now transmitting the response */
  _fmstr_wFlags.flg.bTxActive = 1U;
  _fmstr_wFlags.flg.bTxWaitTC = 0U;

    /* do not replicate the initial SOB  */
  _fmstr_wFlags.flg.bTxLastCharSOB = 0U;

    /* disable receiver, enable transmitter (single-wire communication) */
  FMSTR_SERIAL_DRV.EnableReceive(FMSTR_FALSE);
  FMSTR_SERIAL_DRV.EnableTransmit(FMSTR_TRUE);


    /* kick on the SCI transmission (also clears TX Empty flag on some platforms) */
  (void)FMSTR_SERIAL_DRV.IsTransmitRegEmpty();
  FMSTR_SERIAL_DRV.PutChar(FMSTR_SOB);

    /* TX interrupt enable, RX interrupt disable */
#if FMSTR_LONG_INTR > 0 || FMSTR_SHORT_INTR > 0
  FMSTR_SERIAL_DRV.EnableReceiveInterrupt(FMSTR_FALSE); /* disable SCI receive interrupt */
  FMSTR_SERIAL_DRV.EnableTransmitInterrupt(FMSTR_TRUE); /* enable SCI transmit interrupt */
#endif                                                    /* FMSTR_LONG_INTR || FMSTR_SHORT_INTR */
}

/******************************************************************************
 *
 * @brief    Output buffer transmission
 *
 * @param  getTxChar Return character to be transmitted
 *
 * @return Non-zero when transmission is complete
 *
 * get ready buffer(prepare data to send)
 *
 ******************************************************************************/
static FMSTR_BOOL _FMSTR_Tx(FMSTR_BCHR *getTxChar)
{
  if (fmstr_nTxTodo > 0U)
  {
    (void)FMSTR_ValueFromBuffer8(getTxChar, fmstr_pTxBuff);   // fetch & send character ready to transmit
    if (*getTxChar == FMSTR_SOB)                              // first, handle the replicated SOB characters
    {
      _fmstr_wFlags.flg.bTxLastCharSOB = _fmstr_wFlags.flg.bTxLastCharSOB != 0U ? 0U : 1U;
      if (_fmstr_wFlags.flg.bTxLastCharSOB != 0U)  return FMSTR_FALSE; // yes, repeat the SOB next time
    }
    fmstr_nTxTodo--;
    fmstr_pTxBuff = FMSTR_SkipInBuffer(fmstr_pTxBuff, 1U);
    return FMSTR_FALSE;
  }
  return FMSTR_TRUE;
}

/******************************************************************************
 *
 * @brief  Handle received character
 *
 * @param  rxChar  The character to be processed
 *
 * Handle the character received and -if the message is complete- call the
 * protocol decode routine.
 *
 ******************************************************************************/

static FMSTR_BOOL _FMSTR_Rx(FMSTR_BCHR rxChar)
{
  FMSTR_SERIAL_FLAGS *pflg =&_fmstr_wFlags;

  if (rxChar == FMSTR_SOB)   // first, handle the replicated SOB characters
  {
    pflg->flg.bRxLastCharSOB = pflg->flg.bRxLastCharSOB != 0U ? 0U : 1U;
    if (pflg->flg.bRxLastCharSOB != 0U) return FMSTR_FALSE; // this is either the first byte of replicated SOB or a  real Start-of-Block mark - we will decide next time in FMSTR_Rx
  }

  // we have got a common character preceded by the SOB - this is the command code!
  if (pflg->flg.bRxLastCharSOB != 0U)
  {
    // reset receiving process
    fmstr_pRxBuff = fmstr_pCommBuffer;
    FMSTR_Crc8Init(&fmstr_nRxCrc8);
    FMSTR_Crc8AddByte(&fmstr_nRxCrc8, rxChar);
    *(fmstr_pRxBuff++)= rxChar;
    fmstr_nRxTodo      = 0;

    // if the standard command was received, the message length will come in next byte
    pflg->flg.bRxMsgLengthNext = 1U;

    // command code stored & processed
    pflg->flg.bRxLastCharSOB = 0U;
    return FMSTR_FALSE;
  }

  // we are waiting for the length byte
  if (pflg->flg.bRxMsgLengthNext != 0U)
  {
    // total data length and the checksum
    fmstr_nRxTodo = (FMSTR_SIZE8)(rxChar + 1U);
    FMSTR_Crc8AddByte(&fmstr_nRxCrc8, rxChar);
    *(fmstr_pRxBuff++)= rxChar;

    // now read the data bytes
    pflg->flg.bRxMsgLengthNext = 0U;
    return FMSTR_FALSE;
  }

  // waiting for a data byte?
  if (fmstr_nRxTodo > 0U)
  {
    // decrease number of expected bytes
    fmstr_nRxTodo--;
    // was it the last byte of the message (checksum)?
    if (fmstr_nRxTodo == 0U)
    {
      if (fmstr_pRxBuff == NULL) _FMSTR_SendError(FMSTR_STC_CMDTOOLONG);
      else if (fmstr_nRxCrc8 != rxChar) _FMSTR_SendError(FMSTR_STC_CMDCSERR);
      else
      {
        FMSTR_BPTR pMessageIO = fmstr_pCommBuffer;
        FMSTR_BOOL processed;
        FMSTR_U8 cmd, size;
        pMessageIO = FMSTR_ValueFromBuffer8(&cmd, pMessageIO);                      // command code comes first in the message
        pMessageIO = FMSTR_ValueFromBuffer8(&size, pMessageIO);                     // length of command follows
        processed = FMSTR_ProtocolDecoder(pMessageIO, size, cmd, (void *)"serial"); // do decode now! use "serial" as a globally unique pointer value as our identifier
        FMSTR_UNUSED(processed);
      }
      return FMSTR_TRUE;
    }
    else
    {
      FMSTR_Crc8AddByte(&fmstr_nRxCrc8, rxChar);
      if (fmstr_pRxBuff != NULL) // is there still a space in the buffer?
      {
        if (fmstr_pRxBuff < (fmstr_pCommBuffer + FMSTR_COMM_BUFFER_SIZE))
        {
          *fmstr_pRxBuff++= rxChar;
        }
        else
        {
          /* NULL rx pointer means buffer overflow - but we still need to receive all message characters (for the single-wire mode) so keep "receiving" - but throw away all characters from now */
          fmstr_pRxBuff = NULL;
        }
      }
    }
  }
  return FMSTR_FALSE;
}

/******************************************************************************
 *
 * @brief    Serial communication initialization
 *
 ******************************************************************************/

static FMSTR_BOOL _FMSTR_SerialInit(void)
{
   /* initialize all state variables */
  _fmstr_wFlags.all = 0U;
  fmstr_nTxTodo     = 0U;

  /* Call initialization of serial driver */
  if (FMSTR_SERIAL_DRV.Init() == FMSTR_FALSE)
  {
    return FMSTR_FALSE;
  }

  /* Initialize Serial interface */
  FMSTR_SERIAL_DRV.EnableReceive(FMSTR_TRUE);  /* enable SCI receive interrupt */
  FMSTR_SERIAL_DRV.EnableTransmit(FMSTR_TRUE); /* enable SCI transmit interrupt */

#if FMSTR_SHORT_INTR > 0
  _FMSTR_RingBuffCreate(&fmstr_rxQueue, fmstr_rxBuff, FMSTR_COMM_RQUEUE_SIZE);
#endif


    /* start listening for commands */
  _FMSTR_Listen();


  return FMSTR_TRUE;
}

/*******************************************************************************
 *
 * @brief    API: Serial Transport "Polling" call from the application main loop
 *
 * This function either handles all the SCI communication (polling-only mode =
 * FMSTR_POLL_DRIVEN) or decodes messages received on the background by SCI interrupt
 * (short-interrupt mode = FMSTR_SHORT_INTR).
 *
 *******************************************************************************/

static void _FMSTR_SerialPoll(void)
{
  if (FMSTR_SERIAL_DRV.Poll != NULL) FMSTR_SERIAL_DRV.Poll();

#if FMSTR_POLL_DRIVEN > 0
  FMSTR_ProcessSerial();
#elif FMSTR_SHORT_INTR > 0
  _FMSTR_RxDequeue();
#endif

}


