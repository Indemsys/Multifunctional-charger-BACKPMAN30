/*******************************************************************************/
/*  This file is auto-generated by Azure RTOS GUIX Studio. Do not edit this    */
/*  file by hand. Modifications to this file should only be made by running    */
/*  the Azure RTOS GUIX Studio application and re-generating the application   */
/*  specification file(s). For more information please refer to the Azure RTOS */
/*  GUIX Studio User Guide, or visit our web site at azure.com/rtos            */
/*                                                                             */
/*  GUIX Studio Revision 6.1.12.0                                              */
/*  Date (dd.mm.yyyy):  6.10.2022   Time (hh:mm): 16:25                        */
/*******************************************************************************/


#ifndef _BACKPMANV3_SPECIFICATIONS_H_
#define _BACKPMANV3_SPECIFICATIONS_H_

#include "gx_api.h"

/* Determine if C++ compiler is being used, if so use standard C.              */
#ifdef __cplusplus
extern   "C" {
#endif

/* Define widget ids                                                           */



/* Define animation ids                                                        */

#define GX_NEXT_ANIMATION_ID 1


/* Define user event ids                                                       */

#define GX_NEXT_USER_EVENT_ID GX_FIRST_USER_EVENT


/* Declare properties structures for each utilized widget type                 */

typedef struct GX_STUDIO_WIDGET_STRUCT
{
   GX_CHAR *widget_name;
   USHORT  widget_type;
   USHORT  widget_id;
   #if defined(GX_WIDGET_USER_DATA)
   INT   user_data;
   #endif
   ULONG style;
   ULONG status;
   ULONG control_block_size;
   GX_RESOURCE_ID normal_fill_color_id;
   GX_RESOURCE_ID selected_fill_color_id;
   GX_RESOURCE_ID disabled_fill_color_id;
   UINT (*create_function) (GX_CONST struct GX_STUDIO_WIDGET_STRUCT *, GX_WIDGET *, GX_WIDGET *);
   void (*draw_function) (GX_WIDGET *);
   UINT (*event_function) (GX_WIDGET *, GX_EVENT *);
   GX_RECTANGLE size;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *next_widget;
   GX_CONST struct GX_STUDIO_WIDGET_STRUCT *child_widget;
   ULONG control_block_offset;
   GX_CONST void *properties;
} GX_STUDIO_WIDGET;

typedef struct
{
    GX_CONST GX_STUDIO_WIDGET *widget_information;
    GX_WIDGET        *widget;
} GX_STUDIO_WIDGET_ENTRY;

typedef struct
{
    GX_RESOURCE_ID string_id; 
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
    GX_RESOURCE_ID off_pixelmap_id;
    GX_RESOURCE_ID on_pixelmap_id;
    GX_RESOURCE_ID off_disabled_pixelmap_id;
    GX_RESOURCE_ID on_disabled_pixelmap_id;
} GX_RADIO_BUTTON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID normal_pixelmap_id;
    GX_RESOURCE_ID selected_pixelmap_id;
} GX_ICON_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID string_id;
    GX_RESOURCE_ID font_id;
    GX_RESOURCE_ID normal_text_color_id;
    GX_RESOURCE_ID selected_text_color_id;
    GX_RESOURCE_ID disabled_text_color_id;
} GX_PROMPT_PROPERTIES;

typedef struct
{
    GX_RESOURCE_ID wallpaper_id;
} GX_WINDOW_PROPERTIES;


/* Declare top-level control blocks                                            */

typedef struct WINDOW_CALIBRATE_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT window_calibrate_Val1;
    GX_PROMPT window_calibrate_Lb1;
    GX_PROMPT window_calibrate_Lb2;
    GX_PROMPT window_calibrate_Val2;
    GX_PROMPT window_calibrate_Lb3;
    GX_PROMPT window_calibrate_Lb4;
    GX_PROMPT window_calibrate_Val3;
    GX_PROMPT window_calibrate_Lb5;
    GX_PROMPT window_calibrate_Lb6;
    GX_PROMPT window_calibrate_Lb7;
} WINDOW_CALIBRATE_CONTROL_BLOCK;

typedef struct WINDOW_MENU_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT window_menu_Calibrate;
    GX_PROMPT window_menu_Sd_card_info;
    GX_PROMPT window_menu_Network_info;
    GX_PROMPT window_menu_Power_source_mode;
    GX_PROMPT window_menu_Val1;
    GX_PROMPT window_menu_Reset_Faults;
} WINDOW_MENU_CONTROL_BLOCK;

typedef struct WINDOW_SD_INFO_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT window_SD_info_Val_SD_status;
    GX_PROMPT window_SD_info_Val_ManufID;
    GX_PROMPT window_SD_info_Val_OID;
    GX_PROMPT window_SD_info_Val_NAME;
    GX_PROMPT window_SD_info_Lb1;
    GX_PROMPT window_SD_info_Lb2;
    GX_PROMPT window_SD_info_Lb3;
    GX_PROMPT window_SD_info_Lb4;
    GX_PROMPT window_SD_info_Val_Rev;
    GX_PROMPT window_SD_info_Lb5;
    GX_PROMPT window_SD_info_Val_SN;
    GX_PROMPT window_SD_info_Lb6;
    GX_PROMPT window_SD_info_Val_Manuf_Data;
    GX_PROMPT window_SD_info_Lb7;
    GX_PROMPT window_SD_info_Val_Card_Capacity;
    GX_PROMPT window_SD_info_Lb8;
    GX_PROMPT window_SD_info_Val_FS_Capacity;
    GX_PROMPT window_SD_info_Val_Misc;
} WINDOW_SD_INFO_CONTROL_BLOCK;

typedef struct WINDOW_LAN_INFO_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT window_LAN_info_Val_VID;
    GX_PROMPT window_LAN_info_Lb1;
    GX_PROMPT window_LAN_info_Lb2;
    GX_PROMPT window_LAN_info_Val_PID;
    GX_PROMPT window_LAN_info_Val_MAC;
    GX_PROMPT window_LAN_info_Lb3;
    GX_PROMPT window_LAN_info_Val_DHCP;
    GX_PROMPT window_LAN_info_Val_IP;
    GX_PROMPT window_LAN_info_Val_MASK;
    GX_PROMPT window_LAN_info_Val_GATE;
    GX_PROMPT window_LAN_info_Lb4;
    GX_PROMPT window_LAN_info_Lb5;
    GX_PROMPT window_LAN_info_Lb6;
    GX_PROMPT window_LAN_info_Val_Connection;
} WINDOW_LAN_INFO_CONTROL_BLOCK;

typedef struct WINDOW_CONTROL_BLOCK_STRUCT
{
    GX_WINDOW_MEMBERS_DECLARE
    GX_PROMPT window_Val1;
    GX_PROMPT window_Val2;
    GX_PROMPT window_Val7;
    GX_PROMPT window_Val8;
    GX_PROMPT window_Val9;
    GX_PROMPT window_Lb1;
    GX_PROMPT window_Lb3;
    GX_PROMPT window_Lb2;
    GX_PROMPT window_Lb4;
    GX_PROMPT window_Val3;
    GX_PROMPT window_Lb5;
    GX_PROMPT window_Lb7;
    GX_PROMPT window_Val4;
    GX_PROMPT window_Lb6;
    GX_PROMPT window_Lb8;
    GX_PROMPT window_Lb9;
    GX_PROMPT window_Lb11;
    GX_PROMPT window_Val5;
    GX_PROMPT window_Val6;
    GX_PROMPT window_Lb10;
    GX_PROMPT window_Lb12;
    GX_PROMPT window_Lb13;
    GX_PROMPT window_Lb15;
    GX_PROMPT window_Lb17;
    GX_PROMPT window_Lb14;
    GX_PROMPT window_Lb16;
    GX_PROMPT window_Lb18;
    GX_ICON window_icon;
    GX_PROMPT window_Lb19;
    GX_PROMPT window_Lb20;
    GX_PROMPT window_Lb21;
    GX_PROMPT window_Lb22;
    GX_PROMPT window_Lb25;
    GX_PROMPT window_Lb23;
    GX_PROMPT window_Lb24;
    GX_RADIO_BUTTON window_r_PSW_R;
    GX_RADIO_BUTTON window_r_PSW_F;
    GX_RADIO_BUTTON window_r_ASW_R;
    GX_RADIO_BUTTON window_r_ASW_F;
    GX_RADIO_BUTTON window_r_MODE;
    GX_RADIO_BUTTON window_r_EN_CH;
    GX_RADIO_BUTTON window_r_LSW_F;
    GX_PROMPT window_Val10;
    GX_PROMPT window_Lb26;
    GX_PROMPT window_Val11;
    GX_PROMPT window_Lb27;
    GX_PROMPT window_Val12;
    GX_RADIO_BUTTON window_r_PGOOD;
    GX_PROMPT window_Lb28;
} WINDOW_CONTROL_BLOCK;


/* extern statically defined control blocks                                    */

#ifndef GUIX_STUDIO_GENERATED_FILE
extern WINDOW_CALIBRATE_CONTROL_BLOCK window_calibrate;
extern WINDOW_MENU_CONTROL_BLOCK window_menu;
extern WINDOW_SD_INFO_CONTROL_BLOCK window_SD_info;
extern WINDOW_LAN_INFO_CONTROL_BLOCK window_LAN_info;
extern WINDOW_CONTROL_BLOCK window;
#endif

/* Declare event process functions, draw functions, and callback functions     */

UINT main_screen_event_process(GX_WINDOW *widget, GX_EVENT *event_ptr);

/* Declare the GX_STUDIO_DISPLAY_INFO structure                                */


typedef struct GX_STUDIO_DISPLAY_INFO_STRUCT 
{
    GX_CONST GX_CHAR *name;
    GX_CONST GX_CHAR *canvas_name;
    GX_CONST GX_THEME **theme_table;
    GX_CONST GX_STRING **language_table;
    USHORT   theme_table_size;
    USHORT   language_table_size;
    UINT     string_table_size;
    UINT     x_resolution;
    UINT     y_resolution;
    GX_DISPLAY *display;
    GX_CANVAS  *canvas;
    GX_WINDOW_ROOT *root_window;
    GX_COLOR   *canvas_memory;
    ULONG      canvas_memory_size;
    USHORT     rotation_angle;
} GX_STUDIO_DISPLAY_INFO;


/* Declare Studio-generated functions for creating top-level widgets           */

UINT gx_studio_radio_button_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_icon_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_prompt_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
UINT gx_studio_window_create(GX_CONST GX_STUDIO_WIDGET *info, GX_WIDGET *control_block, GX_WIDGET *parent);
GX_WIDGET *gx_studio_widget_create(GX_BYTE *storage, GX_CONST GX_STUDIO_WIDGET *definition, GX_WIDGET *parent);
UINT gx_studio_named_widget_create(char *name, GX_WIDGET *parent, GX_WIDGET **new_widget);
UINT gx_studio_display_configure(USHORT display, UINT (*driver)(GX_DISPLAY *), GX_UBYTE language, USHORT theme, GX_WINDOW_ROOT **return_root);

/* Determine if a C++ compiler is being used.  If so, complete the standard
  C conditional started above.                                                 */
#ifdef __cplusplus
}
#endif

#endif                                       /* sentry                         */
